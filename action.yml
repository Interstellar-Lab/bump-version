name: 'Check Version'
description: 'Check version number in version file versus latest published version tag'
inputs:
  version-file:
    description: 'Path to the version file'
    required: true
    default: '.VERSION'
  check-only:
    description: 'If "yes", will only check if version in version-file is valid; if "no" will also push a new tag (default: "no")'
    required: false
    default: 'no'
outputs:
  last-version:
    description: 'Last version tag published'
    value: ${{ steps.step1.outputs.last-version }}
  new-version:
    description: 'New version contained in the version file'
    value: ${{ steps.step2.outputs.new-version }}
runs:
  using: "composite"
  steps:
      - name: Git checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Get last version
        id: step1
        run: |
          echo "last-version=$(git describe --abbrev=0 | cut -d 'v' -f2)" >> $GITHUB_ENV
          echo "last-version=$(git describe --abbrev=0 | cut -d 'v' -f2)" >> $GITHUB_OUTPUT
          echo "::notice::last-version=$(git describe --abbrev=0 | cut -d 'v' -f2)"
        shell: bash
      - name: Get new version
        id: step2
        run: |
          echo "new-version=$(cat ${{inputs.version-file}})" >> $GITHUB_ENV
          echo "new-version=$(cat ${{inputs.version-file}})" >> $GITHUB_OUTPUT
          echo "::notice::new-version=$(cat ${{inputs.version-file}})"
        shell: bash
      - name: Check version file is valid
        run: |
          if ! [[ ${{ env.new-version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::'${{ env.new-version }}' is not a valid version format"
            exit 1
          fi
        shell: bash
      - name: Check input
        run: |
          if [[ (${{ inputs.check-only }} != "yes") && (${{ inputs.check-only }} != "no") ]]; then
            echo "::error::'${{ inputs.check-only }}' is not a valid input (should be 'yes' or 'no')"
            exit 1
          fi
        shell: bash
      - name: Error if version is not new
        if: ${{ env.new-version <= env.last-version }}
        run: |
          echo "last version is: v${{ env.last-version }}"
          echo "new version is:    v${{ env.new-version }}"
          echo "${{ env.new-version }} <= ${{ env.last-version }}: version not new"
          echo "::error::no new version"
          exit 1
        shell: bash
      - name: Tag new version
        if: ${{ inputs.check-only == 'no' }}
        run: |
          if ! [[ ${{ inputs.check-only }} != "yes" ]]; then
            echo "::error::'${{ inputs.check-only }}' is not a valid input (should be 'yes' or 'no')"
            exit 1
          fi
          echo "latest version is: v${{ env.last-version }}"
          echo "new version is:    v${{ env.new-version }}"
          echo "publishing new tag..."
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git tag -a v${{ env.new-version }} -m "Realse version ${{ env.new-version }}"
          git push origin v${{ env.new-version }}
          echo "::notice:: new tag published: 'v${{ env.new-version }}'"
        shell: bash
